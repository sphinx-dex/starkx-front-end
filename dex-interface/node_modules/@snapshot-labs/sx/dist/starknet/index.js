"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vote = exports.propose = void 0;
const starknet_1 = require("starknet");
const auth_json_1 = __importDefault(require("./abi/auth.json"));
const constants_json_1 = __importDefault(require("./constants.json"));
const strings_1 = require("./strings");
const { getSelectorFromName } = starknet_1.hash;
async function propose(space, executionHash, metadataUri) {
    const proposer = constants_json_1.default.user;
    const blockNum = '1234567';
    const params = [];
    // @ts-ignore
    const auth = new starknet_1.Contract(auth_json_1.default, constants_json_1.default.auth, starknet_1.defaultProvider);
    const metadataUriFelt = (0, strings_1.strToShortStringArr)(metadataUri);
    const calldata = [proposer, executionHash, metadataUriFelt.length.toString()];
    metadataUriFelt.forEach(m => calldata.push(m.toString()));
    calldata.push(blockNum);
    calldata.push(params.length.toString());
    const receipt = await auth.invoke('execute', {
        to: space,
        function_selector: getSelectorFromName('propose'),
        calldata
    });
    console.log('Receipt', receipt);
    await starknet_1.defaultProvider.waitForTx(receipt.transaction_hash);
    return receipt;
}
exports.propose = propose;
async function vote(space, proposal, choice) {
    const voter = constants_json_1.default.user;
    const params = [];
    // @ts-ignore
    const auth = new starknet_1.Contract(auth_json_1.default, constants_json_1.default.auth, starknet_1.defaultProvider);
    const receipt = await auth.invoke('execute', {
        to: space,
        function_selector: getSelectorFromName('vote'),
        calldata: [voter, proposal, choice, params.length.toString()]
    });
    console.log('Receipt', receipt);
    await starknet_1.defaultProvider.waitForTx(receipt.transaction_hash);
    return receipt;
}
exports.vote = vote;
