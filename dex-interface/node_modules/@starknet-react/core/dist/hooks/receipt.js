"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTransactionReceipt = void 0;
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const providers_1 = require("../providers");
const invalidate_1 = require("./invalidate");
/**
 * Hook to fetch a single transaction receipt.
 *
 * @remarks
 *
 * This hook keeps a cache of receipts by chain and transaction hash
 * so that you can use the hook freely in your application without worrying
 * about sending duplicate network requests.
 *
 * If you need to refresh the transaction receipt data, set `watch: true` in
 * the props. The hook will periodically refresh the transaction data in the
 * background.
 *
 * @example
 * This hook shows how to fetch a transaction receipt.
 * ```tsx
 * function Component() {
 *   const { data, loading, error } = useTransactionReceipt({ hash: txHash })
 *
 *   if (loading) return <span>Loading...</span>
 *   if (error) return <span>Error: {JSON.stringify(error)}</span>
 *   return <span>{data.status}</span>
 * }
 * ```
 *
 * @example
 * This example shows how to submit a transaction and load its status.
 * ```tsx
 * function Component() {
 *   const { address } = useAccount()
 *   const [hash, setHash] = useState(undefined)
 *
 *   const { data, loading, error } = useTransactionReceipt({ hash, watch: true })
 *
 *   const { execute } = useStarknetExecute({
 *     calls: [{
 *       contractAddress: ethAddress,
 *       entrypoint: 'transfer',
 *       calldata: [address, 1, 0]
 *     }]
 *   })
 *
 *   const handleClick = () => {
 *     execute().then(tx => setHash(tx.transaction_hash))
 *   }
 *
 *   return (
 *     <div>
 *       <button onClick={handleClick}>Submit tx</button>
 *       <div>Hash: {hash}</div>
 *       {loading && <div>Loading...</div>}
 *       {error && <div>Error: {JSON.stringify(error)}</div>}
 *       {data && <div>Status: {data.status}</div>}
 *     </div>
 *   )
 * }
 * ```
 */
function useTransactionReceipt({ hash, watch, }) {
    const { library } = (0, providers_1.useStarknet)();
    const queryKey_ = (0, react_1.useMemo)(() => queryKey({ library, hash }), [library, hash]);
    const { data, isLoading, error, refetch } = (0, react_query_1.useQuery)(queryKey_, fetchTransactionReceipt({ library, hash }), {
        enabled: !!hash,
        refetchInterval: (data, _query) => (watch ? refetchInterval(data) : false),
    });
    (0, invalidate_1.useInvalidateOnBlock)({ enabled: watch, queryKey: queryKey_ });
    return { data, loading: isLoading, error: error ?? undefined, refresh: refetch };
}
exports.useTransactionReceipt = useTransactionReceipt;
function queryKey({ library, hash }) {
    return [{ entity: 'transactionReceipt', chainId: library.chainId, hash }];
}
function fetchTransactionReceipt({ library, hash }) {
    return async () => {
        if (!hash)
            throw new Error('hash is required');
        return await library.getTransactionReceipt(hash);
    };
}
function refetchInterval(data) {
    if (data?.status === 'NOT_RECEIVED')
        return 500;
    if (data?.status === 'RECEIVED')
        return 5000;
    if (data?.status === 'PENDING')
        return 5000;
    if (data?.status === 'ACCEPTED_ON_L2')
        return 60000;
    if (data?.status === 'REJECTED')
        return false;
    if (data?.status === 'ACCEPTED_ON_L1')
        return false;
    return false;
}
//# sourceMappingURL=receipt.js.map